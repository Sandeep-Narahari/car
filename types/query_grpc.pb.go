// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryCar_GetCars_FullMethodName = "/car.QueryCar/GetCars"
)

// QueryCarClient is the client API for QueryCar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryCarClient interface {
	GetCars(ctx context.Context, in *GetCarsRequest, opts ...grpc.CallOption) (*GetCarsResponse, error)
}

type queryCarClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryCarClient(cc grpc.ClientConnInterface) QueryCarClient {
	return &queryCarClient{cc}
}

func (c *queryCarClient) GetCars(ctx context.Context, in *GetCarsRequest, opts ...grpc.CallOption) (*GetCarsResponse, error) {
	out := new(GetCarsResponse)
	err := c.cc.Invoke(ctx, QueryCar_GetCars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryCarServer is the server API for QueryCar service.
// All implementations must embed UnimplementedQueryCarServer
// for forward compatibility
type QueryCarServer interface {
	GetCars(context.Context, *GetCarsRequest) (*GetCarsResponse, error)
	mustEmbedUnimplementedQueryCarServer()
}

// UnimplementedQueryCarServer must be embedded to have forward compatible implementations.
type UnimplementedQueryCarServer struct {
}

func (UnimplementedQueryCarServer) GetCars(context.Context, *GetCarsRequest) (*GetCarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCars not implemented")
}
func (UnimplementedQueryCarServer) mustEmbedUnimplementedQueryCarServer() {}

// UnsafeQueryCarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryCarServer will
// result in compilation errors.
type UnsafeQueryCarServer interface {
	mustEmbedUnimplementedQueryCarServer()
}

func RegisterQueryCarServer(s grpc.ServiceRegistrar, srv QueryCarServer) {
	s.RegisterService(&QueryCar_ServiceDesc, srv)
}

func _QueryCar_GetCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryCarServer).GetCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryCar_GetCars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryCarServer).GetCars(ctx, req.(*GetCarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryCar_ServiceDesc is the grpc.ServiceDesc for QueryCar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryCar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "car.QueryCar",
	HandlerType: (*QueryCarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCars",
			Handler:    _QueryCar_GetCars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query.proto",
}
